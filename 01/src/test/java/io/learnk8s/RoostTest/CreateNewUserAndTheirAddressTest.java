// ********RoostGPT********
/*
Test generated by RoostGPT for test APITestCase_clone_clone using AI Type  and AI Model 

ROOST_METHOD_HASH=92aa6a42f7
ROOST_METHOD_SIG_HASH=4d269fdf0c

 ########## Scenario ########## 

{
  feature: 'Feature: User and Address API integration',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Create a new User and their Address',
    steps: 'Given the API base URL is "https://api.example.com"\n' +
      'When I send a POST request to "/users" with the body:\n' +
      '      """\n' +
      '      {\n' +
      '        "name": "John Doe",\n' +
      '        "email": "john.doe@example.com"\n' +
      '      }\n' +
      'Then the response status code should be 201\n' +
      'And the response body should contain "userId"\n' +
      'When I send a POST request to "/users/{userId}/addresses" with the body:\n' +
      '      """\n' +
      '      {\n' +
      '        "street": "123 Main St",\n' +
      '        "city": "Somewhere",\n' +
      '        "state": "CA",\n' +
      '        "zip": "12345"\n' +
      '      }\n' +
      'Then the response status code should be 201\n' +
      'And the response body should contain "addressId"',
    examples: ''
  }
}

*/

// ********RoostGPT********
package io.learnk8s.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CreateNewUserAndTheirAddressTest {
    private BufferedReader reader;
    private String line;
    private String[] payloadObjects;

    @BeforeEach
    public void setUp() throws IOException {
        String path = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "io" + System.getProperty("file.separator") + "learnk8s" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") + "CreateNewUserAndTheirAddressTest.csv";
        reader = new BufferedReader(new FileReader(path));
        reader.readLine(); // Skipping the headers
    }

    @Test
    public void testCreateNewUserAndTheirAddress() throws IOException {
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }

            payloadObjects = line.split("\\^\\|\\^");
            String method = payloadObjects[0];
            String url = payloadObjects[1];
            String reqBody = payloadObjects[3];
            int respCode = Integer.parseInt(payloadObjects[4]);
            String respBody = payloadObjects[5];

            RestAssured.baseURI = url;

            Map<String, Object> headers = new HashMap<>();
            headers.put("Content-Type", "application/json");

            Response response = given().headers(headers).body(reqBody).when().request(method).then().extract().response();

            // Assert the status code
            assertEquals(respCode, response.statusCode());

            // Assert the response body
            assertEquals(respBody, response.body().asString());
        }

        reader.close();
    }
}
